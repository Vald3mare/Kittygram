#name: Main Kittygram workflow
#
#on:
#  push:
#    branches:
#      - main
#
#jobs:
#  tests:
#    runs-on: ubuntu-latest
#
#    services:
#      postgres:
#        image: postgres:13.10
#        env:
#          POSTGRES_USER: django_user
#          POSTGRES_PASSWORD: django_password
#          POSTGRES_DB: django_db
#        ports:
#          - 5432:5432
#        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
#    steps:
#    - uses: actions/checkout@v3
#    - name: Set up Python
#      uses: actions/setup-python@v4
#      with:
#        python-version: 3.9
#
#    - name: Install dependencies
#      run: |
#        python -m pip install --upgrade pip
#        pip install flake8==6.0.0 flake8-isort==6.0.0
#        pip install -r ./backend/requirements.txt
#    - name: Test with flake8 and django tests
#      env:
#        POSTGRES_USER: django_user
#        POSTGRES_PASSWORD: django_password
#        POSTGRES_DB: django_db
#        DB_HOST: 127.0.0.1
#        DB_PORT: 5432
#      run: |
#        python -m flake8 backend/
#        cd backend/
#        python manage.py test
#
#  build_and_push_to_docker_hub:
#    name: Push Docker image to DockerHub
#    runs-on: ubuntu-latest
#    needs: tests
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v3
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Push to DockerHub
#        uses: docker/build-push-action@v4
#        with:
#          context: ./backend/
#          push: true
#          tags: verhanasta/kittygram_backend:latest
#
#  frontend_tests:
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#      - name: Set up nodeJS
#        uses: actions/setup-node@v3
#        with:
#          node-version: 18
#
#      - name: Install dependencies
#        run: |
#          cd frontend/
#          npm ci
#
#      - name: Test frontend
#        run: |
#          cd frontend/
#          npm run test
#
#  build_frontend_and_push_to_docker_hub:
#    name: Push frontend Docker image to DockerHub
#    runs-on: ubuntu-latest
#    needs: frontend_tests
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v3
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Push to DockerHub
#        uses: docker/build-push-action@v4
#        with:
#          context: ./frontend/
#          push: true
#          tags: verhanasta/kittygram_frontend:latest
#
#  build_gateway_and_push_to_docker_hub:
#    name: Push gateway Docker image to DockerHub
#    runs-on: ubuntu-latest
#    steps:
#      - name: Check out the repo
#        uses: actions/checkout@v3
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v2
#      - name: Login to Docker
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#      - name: Push to DockerHub
#        uses: docker/build-push-action@v4
#        with:
#          context: ./nginx/
#          push: true
#          tags: verhanasta/kittygram_gateway:latest
#
#
#  deploy:
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/main'
#    needs:
#      - build_and_push_to_docker_hub
#      - build_frontend_and_push_to_docker_hub
#      - build_gateway_and_push_to_docker_hub
#    steps:
#      - name: Checkout repo
#        uses: actions/checkout@v3
#      - name: Copy docker-compose.production.yml via ssh
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          source: "docker-compose.production.yml"
#          target: "kittygram"
#      - name: Executing remote ssh commands to deploy
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.HOST }}
#          username: ${{ secrets.USER }}
#          key: ${{ secrets.SSH_KEY }}
#          script: |
#            cd kittygram
#            sudo docker compose -f docker-compose.production.yml pull
#            sudo docker compose -f docker-compose.production.yml down
#            sudo docker compose -f docker-compose.production.yml up -d
#            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
#            sudo docker-compose -f docker-compose.production.yml exec backend python manage.py collectstatic --no-input

name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: django_user
          POSTGRES_PASSWORD: django_password
          POSTGRES_DB: django_db
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'
      - name: Copy requirements.txt
        run: cp ./backend/requirements.txt ./requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install -r ./requirements.txt
      - name: Run Django tests
        env:
          POSTGRES_USER: kittygram_user
          POSTGRES_PASSWORD: kittygram_password
          POSTGRES_DB: kittygram
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          cd backend/ 
          python manage.py test

  frontend_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Run frontend tests
        run: |
          cd frontend/
          npm run test

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub (Backend)
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

  build_frontend_and_push_to_docker_hub:
    name: Push Docker image to DockerHub (Frontend)
    runs-on: ubuntu-latest
    needs: frontend_tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push Docker image to DockerHub (Gateway)
    runs-on: ubuntu-latest
    needs:
      - tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push gateway Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
#      - shell: bash
#        env:
#          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
#          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
#          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
#          DATABASE_URL: ${{ secrets.DATABASE_URL }}
#        run: |
#          echo "POSTGRES_DB=$POSTGRES_DB" >> .env
#          echo "POSTGRES_USER=$POSTGRES_USER" >> .env
#          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
#          echo "DATABASE_URL=$DATABASE_URL" >> .env

      - name: Copy .env to the server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ".env"
          target: "/home/verhanasta/kittygram"
      - name: Copy docker-compose.yml to the server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/verhanasta/kittygram"
      - name: Execute deployment via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/verhanasta/kittygram
            sudo docker-compose -f docker-compose.yml pull
            sudo docker-compose -f docker-compose.yml down
            sudo docker-compose -f docker-compose.yml up -d
            sudo docker-compose -f docker-compose.yml exec backend python manage.py collectstatic --noinput
            sudo docker-compose -f docker-compose.yml exec backend python manage.py migrate
            sudo docker system prune -af
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: Деплой прошёл